import { type NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useForm } from 'react-hook-form';
import { useMutation, useQuery } from 'react-query';
import { getCategories, postTodo } from '~/api/router';
import date from 'date-and-time';

type FormValues = {
	description: string;
	categoryId?: string;
	dueAt: string;
};

const NewTodo: NextPage = () => {
	const router = useRouter();

	const { isLoading: catIsLoading, data: catData } = useQuery({
		queryKey: ['categories'],
		queryFn: getCategories,
	});

	const {
		register,
		handleSubmit,
		formState: { errors },
	} = useForm<FormValues>();

	const createTodo = useMutation({
		mutationKey: ['create-todo'],
		mutationFn: postTodo,
		onSuccess: ({ data }) => {
			if (date.isSameDay(new Date(), new Date(data.dueAt)))
				router.push('/');
			else router.push('/todos');
		},
	});

	const onSubmit = (data: FormValues) => {
		createTodo.mutate(data);
	};

	return (
		<>
			<Head>
				<title>Add Todo - Quick Todo</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="flex flex-col h-full w-full items-center justify-center">
				<div className="w-3/5">
					<p className="text-2xl text-left">Add new todo</p>
					<div className="divider"></div>
				</div>
				<form
					className="w-1/2 space-y-2"
					onSubmit={handleSubmit(onSubmit)}>
					<div className="form-control w-full">
						<label className="label">
							<span className="label-text">Task Description</span>
						</label>
						<input
							type="text"
							placeholder="Type here"
							className="input input-bordered w-full"
							{...register('description', { required: true })}
						/>
						{errors?.description && (
							<label className="label">
								<span className="label-text-alt text-red-500">
									Please enter the task description
								</span>
							</label>
						)}
					</div>
					<div className="form-control w-full">
						<label className="label">
							<span className="label-text">Select Category</span>
						</label>
						{catIsLoading ? (
							<select className="select select-bordered w-full text-gray-400 disabled"></select>
						) : (
							<select
								className="select select-bordered w-full text-gray-400"
								{...register('categoryId')}>
								{catData?.data.map((category) => {
									return (
										<option
											key={category.id}
											value={category.id}>
											{category.name}
										</option>
									);
								})}
							</select>
						)}
					</div>
					<div className="form-control w-full">
						<label className="label">
							<span className="label-text">Task Due</span>
						</label>
						<input
							{...register('dueAt', {
								required: true,
								valueAsDate: true,
							})}
							type="datetime-local"
							placeholder="Type here"
							className="input input-bordered w-full"
						/>
						{errors?.dueAt && (
							<label className="label">
								<span className="label-text-alt text-red-500">
									Please enter when the task is due
								</span>
							</label>
						)}
					</div>
					<div className="form-control pt-2">
						<input type="submit" className="btn btn-primary" />
					</div>
				</form>
			</main>
		</>
	);
};

export default NewTodo;
